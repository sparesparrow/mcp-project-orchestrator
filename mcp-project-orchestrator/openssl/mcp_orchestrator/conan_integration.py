"""
Conan integration for Cursor configuration deployment.

This module provides integration with Conan profile deployment,
allowing Cursor configuration to be deployed alongside Conan profiles.
"""

import os
from pathlib import Path
from typing import Optional, Dict, Any
from conan import ConanFile
from conan.tools.files import copy, get

from .cursor_deployer import CursorConfigDeployer
from .platform_detector import PlatformDetector


class ConanCursorIntegration:
    """
    Integrates Cursor configuration deployment with Conan profile deployment.
    
    This class provides methods to deploy Cursor configuration alongside
    Conan profiles, ensuring consistent development environment setup.
    """
    
    def __init__(self, conanfile: ConanFile):
        """
        Initialize the integration.
        
        Args:
            conanfile: The ConanFile instance
        """
        self.conanfile = conanfile
        self.platform_detector = PlatformDetector()
        
    def deploy_cursor_config(self, 
                           repo_root: Optional[Path] = None,
                           force: bool = False,
                           custom_rules: Optional[list] = None,
                           opt_out: bool = False) -> None:
        """
        Deploy Cursor configuration alongside Conan profiles.
        
        Args:
            repo_root: Path to repository root (defaults to current directory)
            force: Overwrite existing configuration
            custom_rules: List of custom rule files to import
            opt_out: Skip Cursor configuration deployment
        """
        if opt_out:
            self.conanfile.output.info("⏭️  Cursor configuration deployment skipped (opt-out)")
            return
        
        # Determine repository root
        if repo_root is None:
            repo_root = Path.cwd()
        else:
            repo_root = Path(repo_root).resolve()
        
        # Find package root
        package_root = Path(__file__).parent.parent
        
        # Create deployer
        deployer = CursorConfigDeployer(repo_root, package_root)
        
        # Deploy configuration
        try:
            deployer.deploy(
                force=force,
                custom_rules=custom_rules,
                opt_out=opt_out
            )
            self.conanfile.output.success("✅ Cursor configuration deployed successfully")
        except Exception as e:
            self.conanfile.output.error(f"❌ Failed to deploy Cursor configuration: {e}")
            raise
    
    def get_cursor_config_status(self, repo_root: Optional[Path] = None) -> Dict[str, Any]:
        """
        Get the status of Cursor configuration.
        
        Args:
            repo_root: Path to repository root (defaults to current directory)
            
        Returns:
            Dictionary containing configuration status
        """
        if repo_root is None:
            repo_root = Path.cwd()
        else:
            repo_root = Path(repo_root).resolve()
        
        package_root = Path(__file__).parent.parent
        deployer = CursorConfigDeployer(repo_root, package_root)
        
        cursor_dir = repo_root / ".cursor"
        
        status = {
            "configured": cursor_dir.exists(),
            "cursor_dir": str(cursor_dir),
            "platform": self.platform_detector.detect_platform(),
        }
        
        if cursor_dir.exists():
            from .cursor_config import CursorConfig
            cursor_config = CursorConfig(cursor_dir)
            
            status.update({
                "rules": cursor_config.get_existing_rules(),
                "prompts": cursor_config.get_existing_prompts(),
                "mcp_configured": cursor_config.has_mcp_config(),
            })
        
        return status
    
    def create_cursor_profile(self, profile_name: str, 
                            repo_root: Optional[Path] = None) -> None:
        """
        Create a Conan profile that includes Cursor configuration.
        
        Args:
            profile_name: Name of the profile to create
            repo_root: Path to repository root (defaults to current directory)
        """
        if repo_root is None:
            repo_root = Path.cwd()
        else:
            repo_root = Path(repo_root).resolve()
        
        # Get platform information
        platform_info = self.platform_detector.detect_platform()
        
        # Create profile content
        profile_content = f"""# Conan profile for {profile_name}
# Generated by mcp-project-orchestrator/openssl

[settings]
os={platform_info['os']}
arch={platform_info['architecture']}
compiler=gcc
compiler.version=11
compiler.libcxx=libstdc++11
build_type=Release

[options]
*:shared=True

[conf]
tools.system.package_manager:mode=install
tools.system.package_manager:sudo=True

[env]
# Cursor configuration
CURSOR_CONFIG_PATH={repo_root}/.cursor
MCP_ORCHESTRATOR_PLATFORM={platform_info['os']}
MCP_ORCHESTRATOR_ARCHITECTURE={platform_info['architecture']}
MCP_ORCHESTRATOR_USER={platform_info['user']}
MCP_ORCHESTRATOR_HOME={platform_info['home']}
MCP_ORCHESTRATOR_CI={platform_info['is_ci']}

# OpenSSL specific
OPENSSL_ROOT_DIR=/usr/local
PKG_CONFIG_PATH=/usr/local/lib/pkgconfig
"""
        
        # Write profile file
        profiles_dir = repo_root / "profiles"
        profiles_dir.mkdir(exist_ok=True)
        
        profile_file = profiles_dir / f"{profile_name}.profile"
        profile_file.write_text(profile_content)
        
        self.conanfile.output.success(f"✅ Created Conan profile: {profile_file}")
    
    def integrate_with_conan_profiles(self, repo_root: Optional[Path] = None) -> None:
        """
        Integrate Cursor configuration with existing Conan profiles.
        
        Args:
            repo_root: Path to repository root (defaults to current directory)
        """
        if repo_root is None:
            repo_root = Path.cwd()
        else:
            repo_root = Path(repo_root).resolve()
        
        # Check if Conan profiles exist
        profiles_dir = repo_root / "profiles"
        if not profiles_dir.exists():
            self.conanfile.output.info("ℹ️  No Conan profiles found, creating default profile")
            self.create_cursor_profile("default", repo_root)
            return
        
        # Update existing profiles with Cursor configuration
        for profile_file in profiles_dir.glob("*.profile"):
            self.conanfile.output.info(f"📝 Updating profile: {profile_file.name}")
            self._update_profile_with_cursor_config(profile_file)
    
    def _update_profile_with_cursor_config(self, profile_file: Path) -> None:
        """
        Update a Conan profile with Cursor configuration.
        
        Args:
            profile_file: Path to the profile file
        """
        # Read existing profile
        content = profile_file.read_text()
        
        # Check if Cursor configuration is already present
        if "CURSOR_CONFIG_PATH" in content:
            self.conanfile.output.info(f"ℹ️  Profile {profile_file.name} already has Cursor configuration")
            return
        
        # Get platform information
        platform_info = self.platform_detector.detect_platform()
        
        # Add Cursor configuration to profile
        cursor_config = f"""
# Cursor configuration
CURSOR_CONFIG_PATH={profile_file.parent.parent}/.cursor
MCP_ORCHESTRATOR_PLATFORM={platform_info['os']}
MCP_ORCHESTRATOR_ARCHITECTURE={platform_info['architecture']}
MCP_ORCHESTRATOR_USER={platform_info['user']}
MCP_ORCHESTRATOR_HOME={platform_info['home']}
MCP_ORCHESTRATOR_CI={platform_info['is_ci']}
"""
        
        # Append to profile
        updated_content = content + cursor_config
        profile_file.write_text(updated_content)
        
        self.conanfile.output.success(f"✅ Updated profile: {profile_file.name}")


def deploy_cursor_with_conan(conanfile: ConanFile, 
                           repo_root: Optional[Path] = None,
                           force: bool = False,
                           custom_rules: Optional[list] = None,
                           opt_out: bool = False) -> None:
    """
    Deploy Cursor configuration alongside Conan profiles.
    
    This is a convenience function that can be called from Conan recipes.
    
    Args:
        conanfile: The ConanFile instance
        repo_root: Path to repository root (defaults to current directory)
        force: Overwrite existing configuration
        custom_rules: List of custom rule files to import
        opt_out: Skip Cursor configuration deployment
    """
    integration = ConanCursorIntegration(conanfile)
    integration.deploy_cursor_config(
        repo_root=repo_root,
        force=force,
        custom_rules=custom_rules,
        opt_out=opt_out
    )