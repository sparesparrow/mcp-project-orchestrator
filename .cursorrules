{"general":["Use descriptive docstrings for all functions, classes, and modules following PEP 257 conventions. Include type hints and detailed explanations.","Maintain a clear and consistent project structure. For example:\nproject_root/\n├── src/\n│   └── mcp_project_orchestrator/\n│       ├── fastmcp.py\n│       └── project_orchestration.py\n├── tests/\n├── docs/\n├── config/\n├── pyproject.toml\n├── Containerfile\n└── README.md"],"componentRules":{"@mcp_project_orchestrator":"Follow standardized design patterns and documentation conventions as detailed in this project.","@pyproject.toml":"Adhere to PEP 621 and repository-specific guidelines. Ensure metadata and configuration settings reflect current project orchestration requirements.","@Web":"Leverage web documentation and online resources for best practices in virtual environments, dependency management, and CI/CD pipelines.","@Containerfile":"Use Podman for containerization. Build images with a minimal base image, install dependencies in one layer, and define a clear CMD.","@project_orchestration.json":"Maintain configuration consistency. All orchestration settings should be dynamically loaded and applied.","@fastmcp.py":"Keep the FastMCP server lightweight with proper logging and exit strategies.","@project_orchestration.py":"Integrate template application logic, documentation generation, and orchestration workflow as per best practices. Ensure robust error handling and logging."},"additionalBestPractices":["Write tests using pytest and maintain high coverage for all modules.","Use CI/CD pipelines to run tests, lint code (e.g., with Ruff), and perform type checks (with mypy).","Regularly update documentation and configuration files to reflect project evolution.","Keep dependency versions up-to-date and document breaking changes."]} 